{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","getReorderedGoods","goods","sortType","isReversed","visibleGoods","ALPHABET","sort","good1","good2","localeCompare","LENGTH","length","reverse","App","useState","NONE","setSortType","setIsReversed","className","type","cn","onClick","current","map","good","SortByLength","SortAlphabetically","Reverse","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UASK,SAASC,EACdC,EAAiBC,EAAoBC,GAGrC,IAAMC,EAAY,YAAOH,GAEzB,OAAQC,GACN,KAAKJ,EAASO,SACZD,EAAaE,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAME,cAAcD,MACxD,MACF,KAAKV,EAASY,OACZN,EAAaE,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAMI,OAASH,EAAMG,UAU7D,OAJIR,GACFC,EAAaQ,UAGRR,G,SA3BJN,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KA8BE,IAAMe,EAAgB,WAC3B,MAAgCC,mBAAShB,EAASiB,MAAlD,mBAAOb,EAAP,KAAiBc,EAAjB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOX,EAAP,KAAmBc,EAAnB,KAmBA,OACE,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBACA,CACE,WAAYlB,IAAaJ,EAASO,WAGtCgB,QApB8B,WACpCL,EAAYlB,EAASO,WAWjB,iCAaA,wBACEc,KAAK,SACLD,UAAWE,IACT,oBACA,CACE,WAAYlB,IAAaJ,EAASY,SAGtCW,QArCwB,WAC9BL,EAAYlB,EAASY,SA4BjB,4BAaA,wBACES,KAAK,SACLD,UAAWE,IACT,oBACA,CACE,YAAajB,IAGjBkB,QAtDmB,WACzBJ,GAAc,SAAAK,GAAO,OAAKA,MA6CtB,sBAcInB,GAAcD,IAAaJ,EAASiB,OACpC,wBACEI,KAAK,SACLD,UAAU,6BACVG,QApDa,WACvBL,EAAYlB,EAASiB,MACrBE,GAAc,IA+CN,sBAWN,6BACE,6BACGjB,EACCD,EACAG,EACAC,GACAoB,KAAI,SAAAC,GAAI,OACR,oBACE,UAAQ,OAERN,UAAWE,IACT,CACEK,aAAcvB,IAAaJ,EAASY,OACpCgB,mBAAoBxB,IAAaJ,EAASO,SAC1CsB,QAASxB,IAPf,SAWGqB,GATIA,cClInBI,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.9bffb08f.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\nexport function getReorderedGoods(\n  goods: string[], sortType: SortType, isReversed: boolean,\n) {\n  // To avoid the original array mutation\n  const visibleGoods = [...goods];\n\n  switch (sortType) {\n    case SortType.ALPHABET:\n      visibleGoods.sort((good1, good2) => good1.localeCompare(good2));\n      break;\n    case SortType.LENGTH:\n      visibleGoods.sort((good1, good2) => good1.length - good2.length);\n      break;\n    default:\n      break;\n  }\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortType, setSortType] = useState(SortType.NONE);\n  const [isReversed, setIsReversed] = useState(false);\n\n  const handleClickReverse = () => {\n    setIsReversed(current => !current);\n  };\n\n  const handleClickSortByLength = () => {\n    setSortType(SortType.LENGTH);\n  };\n\n  const handleClickSortAlphabetically = () => {\n    setSortType(SortType.ALPHABET);\n  };\n\n  const handleClickReset = () => {\n    setSortType(SortType.NONE);\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-info',\n            {\n              'is-light': sortType !== SortType.ALPHABET,\n            },\n          )}\n          onClick={handleClickSortAlphabetically}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-success',\n            {\n              'is-light': sortType !== SortType.LENGTH,\n            },\n          )}\n          onClick={handleClickSortByLength}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-warning',\n            {\n              'is-light': !isReversed,\n            },\n          )}\n          onClick={handleClickReverse}\n        >\n          Reverse\n        </button>\n\n        {\n          ((isReversed || sortType !== SortType.NONE) && (\n            <button\n              type=\"button\"\n              className=\"button is-warning is-light\"\n              onClick={handleClickReset}\n            >\n              Reset\n            </button>\n          ))\n        }\n      </div>\n\n      <ul>\n        <ul>\n          {getReorderedGoods(\n            goodsFromServer,\n            sortType,\n            isReversed,\n          ).map(good => (\n            <li\n              data-cy=\"Good\"\n              key={good}\n              className={cn(\n                {\n                  SortByLength: sortType === SortType.LENGTH,\n                  SortAlphabetically: sortType === SortType.ALPHABET,\n                  Reverse: isReversed,\n                },\n              )}\n            >\n              {good}\n            </li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}